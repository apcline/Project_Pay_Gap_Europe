shiny::runApp('Netflix')
netflix <- read_csv("netflix1.csv")
netflix <- read.csv("netflix1.csv")
runApp('Netflix')
netflix$is_movie <- ifelse(netflix$type == "Movie", TRUE, FALSE)
runApp('Netflix')
runApp('Netflix')
runApp('Netflix')
netflix1 <- filter(netflix[netflix$country == "France"])
netflix1 <- filter(netflix$country == "France")
netflix1 <- netlfix(netflix$country == "France")
library(dplyr)
netflix1 <- netflix %>%
filter(country == 'France')
runApp('Netflix')
runApp('Netflix')
runApp('Netflix')
data <- read.csv("~/Desktop/RProject/pay_gap_Europe.csv")
data.clean<- na.omit(data)
runApp('Netflix')
runApp('Netflix')
runApp('Netflix')
runApp('Netflix')
runApp('Netflix')
runApp('Netflix')
runApp('Netflix')
runApp('Netflix')
runApp('Netflix')
runApp('Netflix')
runApp('Netflix')
runApp('Netflix')
runApp('Netflix')
runApp('Netflix')
runApp('Netflix')
runApp('Netflix')
shiny::runApp('Netflix')
data.clean<- na.omit(data)
data.clean<- na.omit(data)
runApp('paygap')
runApp('paygap')
runApp('paygap')
library(shiny)
# Define UI for application that draws a histogram
shinyUI(fluidPage(
# Application title
titlePanel("Gender Pay Gap"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput("factors", "Indexes:",
choices=c('Business', 'Mining'),
selected = 'Business'),
sliderInput('year', "Year:", min = min(data.clean$Year), max=max(data.clean$Year), value=1, step=1)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
))
# Define server logic required to draw a histogram
shinyServer(function(input, output, session) {
output$distPlot <- renderPlot({
data <- read.csv("~/Desktop/RProject/pay_gap_Europe.csv")
data.clean<- na.omit(data)
data.sub <- subset(data.clean, Year == input$year)
last_20_cols <- tail(colnames(data.clean), 20)
# draw the histogram with the specified number of bins
plot(data.sub[, input$factors], pch=3, main='Impact on gender paygap', ylab = input$factors)
})
})
# Define UI for application that draws a histogram
shinyUI(fluidPage(
# Application title
titlePanel("Gender Pay Gap"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput("factors", "Indexes:",
choices=c('Business', 'Mining'),
selected = 'Business'),
sliderInput('year', "Year:", min = min(data.clean$Year), max=max(data.clean$Year), value=1, step=1)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
))
data.clean <- na.omit(data)
# Define UI for application that draws a histogram
shinyUI(fluidPage(
# Application title
titlePanel("Gender Pay Gap"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput("factors", "Indexes:",
choices=c('Business', 'Mining'),
selected = 'Business'),
sliderInput('year', "Year:", min = min(data.clean$Year), max=max(data.clean$Year), value=1, step=1)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
))
print(data.clean)
show(data.clean)
data <- read.csv("pay_gap_Europe.csv")
output$distPlot <- renderPlot({
data <- read.csv("pay_gap_Europe.csv")
data.clean <- na.omit(data)
data.sub <- subset(data.clean, Year == input$year)
last_20_cols <- tail(colnames(data.clean), 20)
# draw the histogram with the specified number of bins
plot(data.sub[, input$factors], pch=3, main='Impact on gender paygap', ylab = input$factors)
})
# Define server logic required to draw a histogram
shinyServer(function(input, output, session) {
output$distPlot <- renderPlot({
data <- read.csv("pay_gap_Europe.csv")
data.clean <- na.omit(data)
data.sub <- subset(data.clean, Year == input$year)
last_20_cols <- tail(colnames(data.clean), 20)
# draw the histogram with the specified number of bins
plot(data.sub[, input$factors], pch=3, main='Impact on gender paygap', ylab = input$factors)
})
})
# Define UI for application that draws a histogram
shinyUI(fluidPage(
# Application title
titlePanel("Gender Pay Gap"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput("factors", "Indexes:",
choices=c('Business', 'Mining'),
selected = 'Business'),
sliderInput('year', "Year:", min = min(data.clean$Year), max=max(data.clean$Year), value=1, step=1)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
))
library(shiny)
library(dplyr)
# Define server logic required to draw a histogram
shinyServer(function(input, output, session) {
output$distPlot <- renderPlot({
data <- read.csv("pay_gap_Europe.csv")
data.clean <- na.omit(data)
data.sub <- subset(data.clean, Year == input$year)
last_20_cols <- tail(colnames(data.clean), 20)
# draw the histogram with the specified number of bins
plot(data.sub[, input$factors], pch=3, main='Impact on gender paygap', ylab = input$factors)
})
})
# draw the histogram with the specified number of bins
plot(data.sub[, input$factors], pch=3, main='Impact on gender paygap', ylab = input$factors)
output$distPlot <- renderPlot({
data <- read.csv("pay_gap_Europe.csv")
data.clean <- na.omit(data)
data.sub <- subset(data.clean, Year == input$year)
last_20_cols <- tail(colnames(data.clean), 20)
# draw the histogram with the specified number of bins
plot(data.sub[, input$factors], pch=3, main='Impact on gender paygap', ylab = input$factors)
})
# Define server logic required to draw a histogram
shinyServer(function(input, output, session) {
output$distPlot <- renderPlot({
data <- read.csv("pay_gap_Europe.csv")
data.clean <- na.omit(data)
data.sub <- subset(data.clean, Year == input$year)
last_20_cols <- tail(colnames(data.clean), 20)
# draw the histogram with the specified number of bins
plot(data.sub[, input$factors], pch=3, main='Impact on gender paygap', ylab = input$factors)
})
})
# Define server logic required to draw a histogram
shinyServer(function(input, output, session) {
output$distPlot <- renderPlot({
data <- read.csv("pay_gap_Europe.csv")
data.clean <- na.omit(data)
data.sub <- subset(data.clean, Year == input$year)
last_20_cols <- tail(colnames(data.clean), 20)
# draw the histogram with the specified number of bins
plot(data.sub[, input$factors], pch=3, main='Impact on gender paygap', ylab = input$factors)
})
})
output$distPlot <- renderPlot({
data <- read.csv("pay_gap_Europe.csv")
data.clean <- na.omit(data)
data.sub <- subset(data.clean, Year == input$year)
last_20_cols <- tail(colnames(data.clean), 20)
# draw the histogram with the specified number of bins
plot(data.sub[, input$factors], pch=3, main='Impact on gender paygap', ylab = input$factors)
})
data <- read.csv("pay_gap_Europe.csv")
data.clean <- na.omit(data)
data.sub <- subset(data.clean, Year == input$year)
last_20_cols <- tail(colnames(data.clean), 20)
data.sub <- subset(data.clean, Year == input$year)
data <- read.csv("pay_gap_Europe.csv")
data.clean <- na.omit(data)
data.sub <- subset(data.clean, Year == input$year)
last_20_cols <- tail(colnames(data.clean), 20)
data.sub<- subset(data.clean, Year == input$year)
data.sub <- subset(data.clean(), Year == input$year)
data.clean <- na.omit(data)
data.sub <- subset(data.clean(), Year == input$year)
shinyServer(function(input, output, session) {
data <- reactive({
# Read and clean the data
data <- read.csv("pay_gap_Europe.csv")
data.clean <- na.omit(data)
data.clean
})
output$distPlot <- renderPlot({
req(input$year)  # Make sure 'year' is available
data.sub <- subset(data(), Year == input$year)
# Check if 'factors' input is not empty and exists in the dataset
if (!is.null(input$factors) && input$factors %in% colnames(data())) {
# Create a histogram plot
hist(data.sub[, input$factors], main = 'Impact on gender paygap', xlab = input$factors, ylab = 'Frequency')
}
})
})
data <- reactive({
# Read and clean the data
data <- read.csv("pay_gap_Europe.csv")
data.clean <- na.omit(data)
data.clean
})
output$distPlot <- renderPlot({
req(input$year)  # Make sure 'year' is available
data.sub <- subset(data(), Year == input$year)
# Check if 'factors' input is not empty and exists in the dataset
if (!is.null(input$factors) && input$factors %in% colnames(data())) {
# Create a histogram plot
hist(data.sub[, input$factors], main = 'Impact on gender paygap', xlab = input$factors, ylab = 'Frequency')
}
})
# Read and clean the data
data <- read.csv("pay_gap_Europe.csv")
data.clean <- na.omit(data)
data.clean
output$distPlot <- renderPlot({
req(input$year)  # Make sure 'year' is available
data.sub <- subset(data(), Year == input$year)
# Check if 'factors' input is not empty and exists in the dataset
if (!is.null(input$factors) && input$factors %in% colnames(data())) {
# Create a histogram plot
hist(data.sub[, input$factors], main = 'Impact on gender paygap', xlab = input$factors, ylab = 'Frequency')
}
})
req(input$year)  # Make sure 'year' is available
data.sub <- subset(data(), Year == input$year)
# Check if 'factors' input is not empty and exists in the dataset
if (!is.null(input$factors) && input$factors %in% colnames(data())) {
# Create a histogram plot
hist(data.sub[, input$factors], main = 'Impact on gender paygap', xlab = input$factors, ylab = 'Frequency')
}
# Create a histogram plot
hist(data.sub[, input$factors], main = 'Impact on gender paygap', xlab = input$factors, ylab = 'Frequency')
data.sub <- subset(data(), Year == input$year)
data.sub <- subset(data(), year == input$year)
library(readr)
pay_gap_Europe <- read_csv("pay_gap_Europe.csv")
View(pay_gap_Europe)
# Define server logic required to draw a histogram
shinyServer(function(input, output, session) {
output$distPlot <- renderPlot({
data <- read.csv("pay_gap_Europe.csv")
data.clean <- na.omit(data)
data.sub <- subset(data.clean, Year == input$year)
last_20_cols <- tail(colnames(data.clean), 20)
# draw the histogram with the specified number of bins
plot(data.sub[, input$factors], pch=3, main='Impact on gender paygap', ylab = input$factors)
})
})
output$distPlot <- renderPlot({
data <- read.csv("pay_gap_Europe.csv")
data.clean <- na.omit(data)
data.sub <- subset(data.clean, Year == input$year)
last_20_cols <- tail(colnames(data.clean), 20)
# draw the histogram with the specified number of bins
plot(data.sub[, input$factors], pch=3, main='Impact on gender paygap', ylab = input$factors)
})
data <- read.csv("pay_gap_Europe.csv")
data.clean <- na.omit(data)
data.sub <- subset(data.clean, Year == input$year)
last_20_cols <- tail(colnames(data.clean), 20)
# draw the histogram with the specified number of bins
plot(data.sub[, input$factors], pch=3, main='Impact on gender paygap', ylab = input$factors)
data.clean <- na.omit(data)
data.clean <- na.omit(data)
data.clean
output$distPlot <- renderPlot({
req(input$year)  # Make sure 'year' is available
data.sub <- subset(data(), Year == input$year)
# Check if 'factors' input is not empty and exists in the dataset
if (!is.null(input$factors) && input$factors %in% colnames(data())) {
# Create a histogram plot
hist(data.sub[, input$factors], main = 'Impact on gender paygap', xlab = input$factors, ylab = 'Frequency')
}
})
output$distPlot <- renderPlot({
req(input$Year)  # Make sure 'year' is available
data.sub <- subset(data(), Year == input$year)
# Check if 'factors' input is not empty and exists in the dataset
if (!is.null(input$factors) && input$factors %in% colnames(data())) {
# Create a histogram plot
hist(data.sub[, input$factors], main = 'Impact on gender paygap', xlab = input$factors, ylab = 'Frequency')
}
})
data$distPlot <- renderPlot({
req(input$Year)  # Make sure 'year' is available
data.sub <- subset(data(), Year == input$year)
# Check if 'factors' input is not empty and exists in the dataset
if (!is.null(input$factors) && input$factors %in% colnames(data())) {
# Create a histogram plot
hist(data.sub[, input$factors], main = 'Impact on gender paygap', xlab = input$factors, ylab = 'Frequency')
}
})
data <- read.csv("pay_gap_Europe.csv")
data.clean <- na.omit(data)
data.sub <- subset(data.clean, Year == input$year)
data.sub <- reactive({
req(input$year)  # Ensure 'year' is available
subset(data(), Year == input$year)
last_20_cols <- tail(colnames(data.clean), 20)
# draw the histogram with the specified number of bins
plot(data.sub[, input$factors], pch=3, main='Impact on gender paygap', ylab = input$factors)
})
data.sub <- subset(data.clean, Year == input$year)
data.sub <- subset(data.clean, Year == input$year)
runApp('paygap')
runApp('paygap')
library(shiny)
# Define UI for application that draws a histogram
shinyUI(fluidPage(
# Application title
titlePanel("Gender Pay Gap"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput("factors", "Indexes:",
choices=c('Business', 'Mining'),
selected = 'Business'),
sliderInput('year', "Year:", min = min(data.clean$Year), max=max(data.clean$Year), value=1, step=1)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
))
runApp('paygap')
runApp('paygap')
runApp('paygap')
runApp('paygap')
runApp('paygap')
runApp('paygap')
column_choices <- colnames(data.clean)[5:length(colnames(data.clean))]
runApp('paygap')
shiny::runApp('paygap')
output$distPlot <- renderPlot({
data <- read.csv("~/Documents/TBS-M2/U3-Programming/R/RProject/pay_gap_Europe.csv")
data.clean <- na.omit(data)
data.sub <- subset(data.clean, Year == input$year)
last_20_cols <- tail(colnames(data.clean), 20)
# draw the histogram with the specified number of bins
plot(data.sub[, input$factors], pch=3, main='Impact on gender paygap', ylab = input$factors)
})
data <- read.csv("~/Documents/TBS-M2/U3-Programming/R/RProject/pay_gap_Europe.csv")
data.clean <- na.omit(data)
data.sub <- subset(data.clean, Year == input$year)
last_20_cols <- tail(colnames(data.clean), 20)
column_choices <- colnames(data.clean)[5:length(colnames(data.clean))]
# Define UI for application that draws a histogram
shinyUI(fluidPage(
# Application title
titlePanel("Gender Pay Gap"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput("factors", "Select a Column:",
choices = column_choices,
selected = column_choices[1]),
sliderInput('year', "Year:", min = min(data.clean$Year), max = max(data.clean$Year), value = 1, step = 1)
),
# Show a plot of the generated distribution
mainPanel(
tabsetPanel(
tabPanel("Histogram",
plotOutput("distPlot")  # Display the histogram plot here
),
tabPanel("Table",
tableOutput("table1")  # Display the table here
)
)
)
)
))
runApp('paygap')
runApp('paygap')
install usethis
install(usethis)
library(usethis)
install.packages("usethis")
library(usethis)
use_git_config(user.name = "apcline", user.email = "a.cline@tbs-education.org")
use_git_config(user.name = "apcline", user.email = "alexispcline@gmail.com")
install.packages("usethis")
install.packages("usethis")
library(usethis)
use_git_config(user.name = "apcline", user.email = "alexispcline@gmail.com")
create_github_token()
install.packages("gitcreds")
library(gitcreds)
gitcreds_set()
